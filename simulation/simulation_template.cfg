#----------------#
### Simulation ###
#----------------#

simulation_number = [int]
discrete_simulation = [True| ]
topology = [carrier|pico|gwin|loaded_topology]
# must be given if 'loaded_topology' is set, otherwise it is ignored.
loaded_nffg_path = [string]
request_type = [simple|test|multi|simple_equilibrium|more_deterministic|simple_immortal]
# number of initial requests which should have infinite lifetime
immortal_req_count = [int]
orchestrator = [offline|online|hybrid]
dump_freq = [int]
# reciprocal of the expected values of number of seconds between two SG arrivals
request_arrival_lambda = [float]
# reciprocal of the expected value of a request lifetime
request_lifetime_lambda = [float]
max_number_of_iterations = [int]
wait_all_req_expire = [True| ]
request_max_lat = [float]
request_min_lat = [float]
request_nf_type_count = [int]
request_seed = [int]
# used by simple_equilibrium to set the most probable request count in the system.
# in this case request_lifetime_lambda is ignored and calculated based on alive requests.
equilibrium = [int]
# optional arguments for equilibrium fine tuning
equilibrium_radius = [int]
cutoff_epsilon = [float]
req_queue_size = [int]

#------------------------------------#
### Hybrid specific configurations ###
#------------------------------------#
#These values will be used only in case of hybrid orchestrator

what_to_optimize = [all_reqs|reqs_since_last|reqs_lifetime]
when_to_optimize = [always|modell_based|fixed_req_count|fixed_time|periodical_model_based]
when_to_opt_parameter = [int]
resource_share_strat = [double_hundred|dynamic]
# vnf number searching radius:
optdatahandler_param = [int]
# whether the hybrid should launch a thread for MILP or wait for it before
# returning with MAP. Default: True
hybrid_multi_thread = [True| ]

#-------------------------------------#
### Online specific configurations ###
#-------------------------------------#
#Recommended parameters:

enable_shortest_path_cache =
bw_factor = 1.0
res_factor = 1.0
lat_factor = 1.0
shortest_paths = None
return_dist =
propagate_e2e_reqs =
bt_limit = 6
bt_branching_factor = 3

#-------------------------------------#
### Offline specific configurations ###
#-------------------------------------#

optimize_already_mapped_nfs = True
migration_coeff = [float]
load_balance_coeff = [float]
edge_cost_coeff = [float]
# Time limit for the MILP to run measured in seconds
time_limit = [int]
# Optimality limit. If the current solution deviates from the optimal by less
# then 100*mip_gap_limit, the algorithm is terminated
mip_gap_limit = [float]
# Limit of simplex nodes to discover during branch and bound of MILP
node_limit = [int]
migration_handler_name = [class name from milp/migration_costs.py]
# parameters of the migration cost handler class should be added here as key
# value pairs.
[migration_handler_kwargs]
const_cost = [float]
